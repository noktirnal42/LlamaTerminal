import SharedModels  // Changed import from App to SharedModels
import SwiftUI

/// View for displaying command history
public struct CommandHistoryView: View {
    @EnvironmentObject private var appState: AppState
    @State private var searchText: String = ""

    public init() {}
    public var body: some View {
        VStack(spacing: 0) {
            // Search field
            HStack {
                Image(systemName: "magnifyingglass")
                    .foregroundColor(.secondary)

                TextField("Search history", text: $searchText)
                    .textFieldStyle(.plain)

                if !searchText.isEmpty {
                    Button {
                        searchText = ""
                    } label: {
                        Image(systemName: "xmark.circle.fill")
                            .foregroundColor(.secondary)
                    }
                    .buttonStyle(.plain)
                }
            }
            .padding(8)
            .background(Color.gray.opacity(0.1))
            .cornerRadius(8)
            .padding()

            Divider()

            if filteredHistory.isEmpty {
                VStack(spacing: 12) {
                    Image(systemName: "clock.arrow.circlepath")
                        .font(.system(size: 32))
                        .foregroundColor(.secondary)

                    Text(
                        appState.commandHistory.isEmpty
                            ? "No command history yet" : "No matching commands"
                    )
                    .foregroundColor(.secondary)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
                .background(Color(NSColor.controlBackgroundColor))
            } else {
                List {
                    ForEach(filteredHistory) { item in
                        CommandHistoryItemView(item: item)
                            .contextMenu {
                                Button("Run Command") {
                                    if appState.terminalTabs.indices.contains(appState.selectedTabIndex) {
                                        let activeSession = appState.terminalTabs[appState.selectedTabIndex].session
                                        activeSession.sendCommandToProcess(item.command)
                                    }
                                }

                                Button("Copy Command") {
                                    copyToClipboard(item.command)
                                }
                            }
                    }
                }
            }
        }
    }

    /// Filtered history based on search text
    private var filteredHistory: [CommandHistoryItem] {
        if searchText.isEmpty {
            return appState.commandHistory
        } else {
            return appState.commandHistory.filter { item in
                item.command.lowercased().contains(searchText.lowercased())
            }
        }
    }

    /// Copies text to the clipboard
    /// - Parameter text: The text to copy
    private func copyToClipboard(_ text: String) {
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(text, forType: .string)
    }
}

/// View for a single command history item
public struct CommandHistoryItemView: View {
    let item: CommandHistoryItem  // Added property for the item

    public init(item: CommandHistoryItem) {
        self.item = item
    }

    public var body: some View {
        VStack(alignment: .leading, spacing: 4) {
            HStack {
                Text(item.command)
                    .font(.system(.body, design: .monospaced))
                    .lineLimit(1)

                Spacer()

                if item.isAIGenerated {
                    Image(systemName: "brain")
                        .foregroundColor(.blue)
                        .font(.caption)
                        .help("Generated by AI")
                }
            }

            if !item.output.isEmpty {
                Text(item.output)
                    .font(.system(.caption, design: .monospaced))
                    .foregroundColor(.secondary)
                    .lineLimit(3)
                    .padding(.leading, 8)
            }
        }
    }
}
